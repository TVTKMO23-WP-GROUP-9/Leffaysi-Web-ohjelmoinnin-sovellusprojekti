-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.

-- Skeema ja testidataa tauluille
-- laitoin nimiin _ että ei tule ongelmia varattujen sanojen kanssa (esim. Group)

DROP TABLE IF EXISTS Favoritelist_ CASCADE;
DROP TABLE IF EXISTS Group_ CASCADE;
DROP TABLE IF EXISTS Memberlist_ CASCADE;
DROP TABLE IF EXISTS Message_ CASCADE;
DROP TABLE IF EXISTS Profile_ CASCADE;
DROP TABLE IF EXISTS Review_ CASCADE;

CREATE TABLE IF NOT EXISTS Profile_
(
    profileid SERIAL PRIMARY KEY,
    profilename VARCHAR(255) UNIQUE NOT NULL,
    hashedpassword VARCHAR(255) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    profilepicurl text COLLATE pg_catalog."default",
    is_private BOOLEAN DEFAULT FALSE, 
    "timestamp" TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    description text COLLATE pg_catalog."default"
);

CREATE TABLE IF NOT EXISTS Group_
(
    groupid SERIAL PRIMARY KEY,
    groupname VARCHAR(255) UNIQUE NOT NULL,
    groupexplanation text COLLATE pg_catalog."default",
    "timestamp" timestamp without time zone NOT NULL
);

-- mainuserissa 1 = ryhmän omistaja, 0 = jäsen
-- 0 = accepted, 1 = request sent to user , 2 = user tries to request join
CREATE TABLE IF NOT EXISTS Memberlist_
(
    memberlistid serial NOT NULL,
    profileid integer NOT NULL,
    mainuser integer NOT NULL DEFAULT 0,
    groupid integer NOT NULL,
    pending integer NOT NULL DEFAULT 0,
    FOREIGN KEY (profileid) REFERENCES Profile_(profileid),
    FOREIGN KEY (groupid) REFERENCES Group_(groupid)
);

CREATE TABLE IF NOT EXISTS Message_
(
    messageid serial NOT NULL,
    groupid integer NOT NULL,
    profileid integer NOT NULL,
    message text COLLATE pg_catalog."default" NOT NULL,
    "timestamp" timestamp without time zone NOT NULL,
    FOREIGN KEY (profileid) REFERENCES Profile_(profileid),
    FOREIGN KEY (groupid) REFERENCES Group_(groupid)
);

CREATE TABLE IF NOT EXISTS Favoritelist_
(
    idfavoritelist serial NOT NULL,
    profileid integer,
    groupid integer,
    favoriteditem text COLLATE pg_catalog."default" ,
    showtime text COLLATE pg_catalog."default",
    "timestamp" timestamp without time zone NOT NULL,
    CONSTRAINT "Favoritelist_pkey" PRIMARY KEY (idfavoritelist),
    FOREIGN KEY (profileid) REFERENCES Profile_(profileid),
    FOREIGN KEY (groupid) REFERENCES Group_(groupid)
);

CREATE TABLE IF NOT EXISTS Review_
(
    idreview serial NOT NULL,
    profileid integer NOT NULL,
    revieweditem text COLLATE pg_catalog."default",
    review text COLLATE pg_catalog."default",
    rating smallint NOT NULL,
    "timestamp" timestamp without time zone NOT NULL,
    FOREIGN KEY (profileid) REFERENCES Profile_(profileid)
);

ALTER TABLE IF EXISTS Favoritelist_
    ADD CONSTRAINT fk_groupid FOREIGN KEY (groupid)
    REFERENCES Group_ (groupid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS Favoritelist_
    ADD CONSTRAINT fk_profileid FOREIGN KEY (profileid)
    REFERENCES Profile_ (profileid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS Memberlist_
    ADD CONSTRAINT fk_groupid FOREIGN KEY (groupid)
    REFERENCES Group_ (groupid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS Memberlist_
    ADD CONSTRAINT fk_profileid FOREIGN KEY (profileid)
    REFERENCES Profile_ (profileid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS Message_
    ADD CONSTRAINT fk_groupid FOREIGN KEY (groupid)
    REFERENCES Group_ (groupid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS Message_
    ADD CONSTRAINT fk_profileid FOREIGN KEY (profileid)
    REFERENCES Profile_ (profileid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS Review_
    ADD CONSTRAINT fk_profileid FOREIGN KEY (profileid)
    REFERENCES Profile_ (profileid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
